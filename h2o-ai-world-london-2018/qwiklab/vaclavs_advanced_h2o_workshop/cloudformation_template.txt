{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "CloudFormation",

  "Parameters": {
    "InstanceType": {
      "Description": "EC2 instance type",
      "Type" : "String",
      "Default" : "m4.4xlarge",
      "NoEcho": "true",
      "AllowedValues" : [ "m4.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "KeyName":{
      "Description":"Name of an existing EC2 KeyPair to enable access to qwiklabInstance",
      "Default":"generic-qwiklab",
      "Type":"String"
    },
    "AdministratorUser": {
      "Description": "Username the student logs into",
      "Default": "ubuntu",
      "Type": "String"
    }
  },

  "Resources": {
    "qwiklabInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId" : "ami-a72577df",
        "InstanceType": { "Ref": "InstanceType" },
        "SecurityGroups": [ { "Ref": "qwiklabInstanceSecurityGroup" } ],
        "KeyName": { "Ref": "KeyName" },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": ["", [
              "#!/bin/bash\n",

              "# This script runs on instance boot and checks to make sure the instance has started properly",
              "# before handing it off to a qwiklab student.",
              "#",
              "# For every 100 or so instances that are started, a handful don't start properly for whatever",
              "# reason.  This piece of code makes sure the bad ones die off and never make it to a student.",
              "#",
              "# In the code below, a loop is checking that the Jupyter notebook started properly.",
              "# The 302 Found HTTP response indicates a proper start.",
              "# Once it starts properly, the cfn-signal command run from inside the instance tells the",
              "# cloudformation stack manager the instance is ready.",
              "# The CreationPolicy immediately below with a ResourceSignal timeout of 15 minutes waits for",
              "# the cfn-signal, and the instance will die off after 15 minutes if no signal arrives.",
              "# ",
              "# If all of the above happens successfully, then the lab is available to be claimed by a",
              "# student in qwiklab.",

              "set -x\n",

              "SUCCESS=0\n",

              "for (( i = 0; i < 3600; i++ ))\n",
              "do\n",
              "  /bin/echo ITERATION ${i} >> /tmp/userdata_iteration\n",
              "  rm -f /tmp/curl.out\n",
              "  curl -v http://localhost:8888 >& /tmp/curl.out\n",
              "  if [ $? -ne 0 ]; then\n",
              "    sleep 1\n",
              "    continue\n",
              "  fi\n",

              "  grep 'HTTP/1.1 302 Found' /tmp/curl.out > /dev/null\n",
              "  if [ $? -ne 0 ]; then\n",
              "  sleep 1\n",
              "    continue\n",
              "  fi\n",

              "  rm -f /tmp/curl.out\n",
              "  SUCCESS=1\n",
              "  break\n",
              "done\n",

              "if [ ${SUCCESS} -ne 1 ]; then\n",
              "  /bin/echo FAILED >> /tmp/userdata_failed\n",
              "  exit 1\n",
              "fi\n",

              "/bin/echo SUCCEDED >> /tmp/userdata_succeeded\n",
              "\n",
              "if [ ! -f /usr/local/bin/cfn-signal ]; then\n",
              "  mkdir -p /tmp/aws-cfn-bootstrap-latest\n",
              "  curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-1.4-8.tar.gz | tar xz -C /tmp/aws-cfn-bootstrap-latest --strip-components 1\n",
              "  apt-get update\n",
              "  apt-get install -y python-pip\n",
              "  pip install --upgrade /tmp/aws-cfn-bootstrap-latest\n",
              "fi \n",
              "\n",
              "/usr/local/bin/cfn-signal --exit-code 0",
              "                          --stack ", { "Ref" : "AWS::StackName" },
              "                          --resource qwiklabInstance",
              "                          --region ", { "Ref" : "AWS::Region" }, "\n",

              "/bin/echo userdata_end > /tmp/userdata_end\n"
            ]]
          }
        }
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M"
        }
      }
    },

    "qwiklabInstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable ports",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 4040,
            "ToPort": 4040,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 8787,
            "ToPort": 8787,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 8888,
            "ToPort": 8888,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 12345,
            "ToPort": 12345,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 54321,
            "ToPort": 54321,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 54323,
            "ToPort": 54323,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 54325,
            "ToPort": 54325,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 54327,
            "ToPort": 54327,
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    }
  },

  "Outputs": {
    "Jupyter": {
      "Description": "Jupyter URL",
      "Value": { "Fn::Join": [ "", ["http://", { "Fn::GetAtt": ["qwiklabInstance", "PublicDnsName"] }, ":8888" ]]}
    },
    "RStudio": {
      "Description": "RStudio URL",
      "Value": { "Fn::Join": [ "", ["http://", { "Fn::GetAtt": ["qwiklabInstance", "PublicDnsName"] }, ":8787" ]]}
    },
    "H2O": {
      "Description": "H2O URL",
      "Value": { "Fn::Join": [ "", ["http://", { "Fn::GetAtt": ["qwiklabInstance", "PublicDnsName"] }, ":54321" ]]}
    }
  }
}
